# Define query function
query_db <- function(query_logic) {
query <- paste0(query_logic)
rs <- dbSendQuery(con, query)
df <- fetch(rs, n = -1)
return(df)
}
# Pull Data ----------
# Read in MLB pitches thrown since 2020
query <- paste0("SELECT pitch_id, pitch_type, game_date, release_speed, release_pos_x, release_pos_z, pitcher, p_throws, pfx_x, pfx_z, release_extension
FROM sc_raw
WHERE game_year >= 2020 AND game_type = 'R'")
raw <- query_db(query)
# Disconnect from psubase_db
dbDisconnect(con)
library(tidyverse)
library(DBI)
library(RMySQL)
# Database credentials
DB_USER <- Sys.getenv("PSU_BASE_USER")
DB_PASSWORD <- Sys.getenv("PSU_BASE_PASSWORD")
DB_DBNAME <- Sys.getenv("PSU_BASE_DBNAME")
DB_PORT <- as.numeric(Sys.getenv("PSU_BASE_PORT"))
DB_HOST <- Sys.getenv("PSU_BASE_HOST")
# Connect to psubase_db
con <- dbConnect(MySQL(), user = DB_USER, password = DB_PASSWORD, dbname = DB_DBNAME, port = DB_PORT, host = DB_HOST)
# Define query function
query_db <- function(query_logic) {
query <- paste0(query_logic)
rs <- dbSendQuery(con, query)
df <- fetch(rs, n = -1)
return(df)
}
# Pull Data ----------
# Read in MLB pitches thrown since 2020
query <- paste0("SELECT pitch_id, pitch_type, game_pk, release_speed, release_pos_x, release_pos_z, pitcher, p_throws, pfx_x, pfx_z, release_extension
FROM sc_raw
WHERE game_year >= 2020 AND game_type = 'R'")
pitches <- query_db(query)
# Disconnect from psubase_db
dbDisconnect(con)
# Feature Engineering ---------
# Convert pitch movement to inches and switch to pitcher's perspective
pitches_stuff <- pitches %>%
mutate(pfx_x = pfx_x * 12 * -1,
pfx_z = pfx_z * 12)
# Standardize horizontal movement, horizontal release position, and spin axis to RHP perspective
pitches_stuff <- pitches_stuff %>%
mutate(pfx_x_adj = ifelse(p_throws == "L", -pfx_x, pfx_x),
release_pos_x_adj = ifelse(p_throws == "L", -release_pos_x, release_pos_x),
spin_axis_adj = ifelse(p_throws == "L", 360 - spin_axis, spin_axis))
# Standardize horizontal movement, horizontal release position, and spin axis to RHP perspective
pitches_stuff <- pitches_stuff %>%
mutate(pfx_x_adj = ifelse(p_throws == "L", -pfx_x, pfx_x),
release_pos_x_adj = ifelse(p_throws == "L", -release_pos_x, release_pos_x))#,
# Get average velocity and movement of fastballs thrown by each pitcher/game combination
fb_avgs <- pitches_stuff %>%
filter(pitch_type %in% c("FF", "SI", "FC")) %>%
group_by(game_pk, pitcher, pitch_type) %>%
summarise(fb_count = n(),
fb_release_speed = mean(release_speed, na.rm = TRUE),
fb_pfx_x_adj = mean(pfx_x_adj, na.rm = TRUE),
fb_pfx_z = mean(pfx_z, na.rm = TRUE)) %>%
rename(fb_pitch_type = pitch_type)
# Identify primary fastball for each pitcher/game combination
prim_fb_avgs <- fb_avgs %>%
group_by(game_pk, pitcher) %>%
arrange(desc(fb_count)) %>%
filter(row_number() == 1)
# Merge all pitches with average primary fastball characteristics for that game
pitches_stuff <- left_join(pitches_stuff, prim_fb_avgs, by = c("game_pk", "pitcher"))
# Calculate velocity and movement differentials for breaking balls and offspeed based on primary fastball
pitches_stuff <- pitches_stuff %>%
mutate(release_speed_dif = release_speed - fb_release_speed,
pfx_x_adj_dif = pfx_x_adj - fb_pfx_x_adj,
pfx_z_dif = pfx_z - fb_pfx_z)
# Fix differentials for primary fastballs
pitches_stuff <- pitches_stuff %>%
mutate(release_speed_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, release_speed_dif),
pfx_x_adj_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, pfx_x_adj_dif),
pfx_z_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, pfx_z_dif))
# Load Stuff+ model
stuff_model <- readRDS("C:/Users/malco/Documents/GitHub/STAT494H/stuff_plus/volume/models/final_model.rds")
# Use function to calculate xRVStuff for all pitches in sc_raw
get_xRVStuff <- function(data) {
# Separate pitches with missing values
clean <- data %>% filter(complete.cases(.))
dirty <- data %>% filter(!complete.cases(.))
clean_preds <- predict(stuff_model, clean) %>%
bind_cols(clean) %>%
rename(xRVStuff = .pred)
dirty <- dirty %>% mutate(xRVStuff = NA)
stuff_res <- rbind(clean_preds, dirty)
return(stuff_res)
}
stuff_res <- get_xRVStuff(pitches_stuff) # xRVStuff for all pitches in sc_raw
library(tidyverse)
library(DBI)
library(RMySQL)
library(tidymodels)
library(xgboost)
stuff_res <- get_xRVStuff(pitches_stuff) # xRVStuff for all pitches in sc_raw
# Feature Engineering ---------
# Convert pitch movement to inches and switch to pitcher's perspective
pitches_stuff <- pitches %>%
mutate(game_pk = as.integer(game_pk),
pfx_x = pfx_x * 12 * -1,
pfx_z = pfx_z * 12)
# Use function to calculate xRVStuff for all pitches in sc_raw
get_xRVStuff <- function(data) {
# Separate pitches with missing values
clean <- data %>% filter(complete.cases(.))
dirty <- data %>% filter(!complete.cases(.))
clean_preds <- predict(stuff_model, clean) %>%
bind_cols(clean) %>%
rename(xRVStuff = .pred)
dirty <- dirty %>% mutate(xRVStuff = NA)
stuff_res <- rbind(clean_preds, dirty)
return(stuff_res)
}
stuff_res <- get_xRVStuff(pitches_stuff) # xRVStuff for all pitches in sc_raw
library(tidyverse)
library(DBI)
library(RMySQL)
library(tidymodels)
library(xgboost)
# Database credentials
DB_USER <- Sys.getenv("PSU_BASE_USER")
DB_PASSWORD <- Sys.getenv("PSU_BASE_PASSWORD")
DB_DBNAME <- Sys.getenv("PSU_BASE_DBNAME")
DB_PORT <- as.numeric(Sys.getenv("PSU_BASE_PORT"))
DB_HOST <- Sys.getenv("PSU_BASE_HOST")
# Connect to psubase_db
con <- dbConnect(MySQL(), user = DB_USER, password = DB_PASSWORD, dbname = DB_DBNAME, port = DB_PORT, host = DB_HOST)
# Define query function
query_db <- function(query_logic) {
query <- paste0(query_logic)
rs <- dbSendQuery(con, query)
df <- fetch(rs, n = -1)
return(df)
}
# Pull Data ----------
# Read in MLB pitches thrown since 2020
query <- paste0("SELECT pitch_id, pitch_type, game_pk, release_speed, release_pos_x, release_pos_z, pitcher, p_throws, pfx_x, pfx_z, release_extension
FROM sc_raw
WHERE game_year >= 2020 AND game_type = 'R'")
pitches <- query_db(query)
# Disconnect from psubase_db
dbDisconnect(con)
# Feature Engineering ---------
# Convert pitch movement to inches and switch to pitcher's perspective
pitches_stuff <- pitches %>%
mutate(game_pk = as.integer(game_pk),
pfx_x = pfx_x * 12 * -1,
pfx_z = pfx_z * 12)
# Standardize horizontal movement, horizontal release position, and spin axis to RHP perspective
pitches_stuff <- pitches_stuff %>%
mutate(pfx_x_adj = ifelse(p_throws == "L", -pfx_x, pfx_x),
release_pos_x_adj = ifelse(p_throws == "L", -release_pos_x, release_pos_x))#,
#spin_axis_adj = ifelse(p_throws == "L", 360 - spin_axis, spin_axis))
# Get average velocity and movement of fastballs thrown by each pitcher/game combination
fb_avgs <- pitches_stuff %>%
filter(pitch_type %in% c("FF", "SI", "FC")) %>%
group_by(game_pk, pitcher, pitch_type) %>%
summarise(fb_count = n(),
fb_release_speed = mean(release_speed, na.rm = TRUE),
fb_pfx_x_adj = mean(pfx_x_adj, na.rm = TRUE),
fb_pfx_z = mean(pfx_z, na.rm = TRUE)) %>%
rename(fb_pitch_type = pitch_type)
# Identify primary fastball for each pitcher/game combination
prim_fb_avgs <- fb_avgs %>%
group_by(game_pk, pitcher) %>%
arrange(desc(fb_count)) %>%
filter(row_number() == 1)
# Merge all pitches with average primary fastball characteristics for that game
pitches_stuff <- left_join(pitches_stuff, prim_fb_avgs, by = c("game_pk", "pitcher"))
# Calculate velocity and movement differentials for breaking balls and offspeed based on primary fastball
pitches_stuff <- pitches_stuff %>%
mutate(release_speed_dif = release_speed - fb_release_speed,
pfx_x_adj_dif = pfx_x_adj - fb_pfx_x_adj,
pfx_z_dif = pfx_z - fb_pfx_z)
# Fix differentials for primary fastballs
pitches_stuff <- pitches_stuff %>%
mutate(release_speed_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, release_speed_dif),
pfx_x_adj_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, pfx_x_adj_dif),
pfx_z_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, pfx_z_dif))
# Calculate Stuff+ ----------
# Load Stuff+ model
stuff_model <- readRDS("C:/Users/malco/Documents/GitHub/STAT494H/stuff_plus/volume/models/final_model.rds")
# Use function to calculate xRVStuff for all pitches in sc_raw
get_xRVStuff <- function(data) {
# Separate pitches with missing values
clean <- data %>% filter(complete.cases(.))
dirty <- data %>% filter(!complete.cases(.))
clean_preds <- predict(stuff_model, clean) %>%
bind_cols(clean) %>%
rename(xRVStuff = .pred)
dirty <- dirty %>% mutate(xRVStuff = NA)
stuff_res <- rbind(clean_preds, dirty)
return(stuff_res)
}
stuff_res <- get_xRVStuff(pitches_stuff) # xRVStuff for all pitches in sc_raw
library(tidyverse)
library(DBI)
library(RMySQL)
library(tidymodels)
library(xgboost)
# Database credentials
DB_USER <- Sys.getenv("PSU_BASE_USER")
DB_PASSWORD <- Sys.getenv("PSU_BASE_PASSWORD")
DB_DBNAME <- Sys.getenv("PSU_BASE_DBNAME")
DB_PORT <- as.numeric(Sys.getenv("PSU_BASE_PORT"))
DB_HOST <- Sys.getenv("PSU_BASE_HOST")
# Connect to psubase_db
con <- dbConnect(MySQL(), user = DB_USER, password = DB_PASSWORD, dbname = DB_DBNAME, port = DB_PORT, host = DB_HOST)
# Define query function
query_db <- function(query_logic) {
query <- paste0(query_logic)
rs <- dbSendQuery(con, query)
df <- fetch(rs, n = -1)
return(df)
}
players_query <- paste0("SELECT *
FROM mlb_players;")
players <- query_db(players_query)
# Disconnect from psubase_db
dbDisconnect(con)
# Convert to Stuff+
league_overall_stuff <- stuff_res %>%
group_by(game_year) %>%
summarise(mean_xRVStuff = mean(xRVStuff, na.rm = TRUE),
sd_xRVStuff = sd(xRVStuff, na.rm = TRUE))
library(tidyverse)
library(DBI)
library(RMySQL)
library(tidymodels)
library(xgboost)
# Database credentials
DB_USER <- Sys.getenv("PSU_BASE_USER")
DB_PASSWORD <- Sys.getenv("PSU_BASE_PASSWORD")
DB_DBNAME <- Sys.getenv("PSU_BASE_DBNAME")
DB_PORT <- as.numeric(Sys.getenv("PSU_BASE_PORT"))
DB_HOST <- Sys.getenv("PSU_BASE_HOST")
# Connect to psubase_db
con <- dbConnect(MySQL(), user = DB_USER, password = DB_PASSWORD, dbname = DB_DBNAME, port = DB_PORT, host = DB_HOST)
# Define query function
query_db <- function(query_logic) {
query <- paste0(query_logic)
rs <- dbSendQuery(con, query)
df <- fetch(rs, n = -1)
return(df)
}
# Pull Data ----------
# Read in MLB pitches thrown since 2020
pitches_query <- paste0("SELECT pitch_id, pitch_type, game_pk, game_year, release_speed, release_pos_x, release_pos_z, pitcher, p_throws, pfx_x, pfx_z, release_extension
FROM sc_raw
WHERE game_year >= 2020 AND game_type = 'R';")
pitches <- query_db(pitches_query)
players_query <- paste0("SELECT *
FROM mlb_players;")
players <- query_db(players_query)
# Disconnect from psubase_db
dbDisconnect(con)
# Feature Engineering ---------
# Convert pitch movement to inches and switch to pitcher's perspective
pitches_stuff <- pitches %>%
mutate(game_pk = as.integer(game_pk),
pfx_x = pfx_x * 12 * -1,
pfx_z = pfx_z * 12)
# Standardize horizontal movement, horizontal release position, and spin axis to RHP perspective
pitches_stuff <- pitches_stuff %>%
mutate(pfx_x_adj = ifelse(p_throws == "L", -pfx_x, pfx_x),
release_pos_x_adj = ifelse(p_throws == "L", -release_pos_x, release_pos_x))#,
#spin_axis_adj = ifelse(p_throws == "L", 360 - spin_axis, spin_axis))
# Get average velocity and movement of fastballs thrown by each pitcher/game combination
fb_avgs <- pitches_stuff %>%
filter(pitch_type %in% c("FF", "SI", "FC")) %>%
group_by(game_pk, pitcher, pitch_type) %>%
summarise(fb_count = n(),
fb_release_speed = mean(release_speed, na.rm = TRUE),
fb_pfx_x_adj = mean(pfx_x_adj, na.rm = TRUE),
fb_pfx_z = mean(pfx_z, na.rm = TRUE)) %>%
rename(fb_pitch_type = pitch_type)
# Identify primary fastball for each pitcher/game combination
prim_fb_avgs <- fb_avgs %>%
group_by(game_pk, pitcher) %>%
arrange(desc(fb_count)) %>%
filter(row_number() == 1)
# Merge all pitches with average primary fastball characteristics for that game
pitches_stuff <- left_join(pitches_stuff, prim_fb_avgs, by = c("game_pk", "pitcher"))
# Calculate velocity and movement differentials for breaking balls and offspeed based on primary fastball
pitches_stuff <- pitches_stuff %>%
mutate(release_speed_dif = release_speed - fb_release_speed,
pfx_x_adj_dif = pfx_x_adj - fb_pfx_x_adj,
pfx_z_dif = pfx_z - fb_pfx_z)
# Fix differentials for primary fastballs
pitches_stuff <- pitches_stuff %>%
mutate(release_speed_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, release_speed_dif),
pfx_x_adj_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, pfx_x_adj_dif),
pfx_z_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, pfx_z_dif))
# Calculate Stuff+ ----------
# Load Stuff+ model
stuff_model <- readRDS("C:/Users/malco/Documents/GitHub/STAT494H/stuff_plus/volume/models/final_model.rds")
# Use function to calculate xRVStuff for all pitches in sc_raw
get_xRVStuff <- function(data) {
# Separate pitches with missing values
clean <- data %>% filter(complete.cases(.))
dirty <- data %>% filter(!complete.cases(.))
clean_preds <- predict(stuff_model, clean) %>%
bind_cols(clean) %>%
rename(xRVStuff = .pred)
dirty <- dirty %>% mutate(xRVStuff = NA)
stuff_res <- rbind(clean_preds, dirty)
return(stuff_res)
}
stuff_res <- get_xRVStuff(pitches_stuff) # xRVStuff for all pitches in sc_raw
# Convert to Stuff+
league_overall_stuff <- stuff_res %>%
group_by(game_year) %>%
summarise(mean_xRVStuff = mean(xRVStuff, na.rm = TRUE),
sd_xRVStuff = sd(xRVStuff, na.rm = TRUE))
stuff_res <- stuff_res %>%
left_join(stuff_res, league_overall_stuff, by = "game_year")
stuff_res <- stuff_res %>%
left_join(stuff_res, league_overall_stuff, by = "game_year") %>%
mutate(xRVStuffZ = round(-(xRVStuff - mean_xRVStuff) / sd_xRVStuff, 2),
`Stuff+` = round((xRVStuffZ * 10) + 100, 0))
stuff_res <- stuff_res %>%
left_join(league_overall_stuff, by = "game_year") %>%
mutate(xRVStuffZ = round(-(xRVStuff - mean_xRVStuff) / sd_xRVStuff, 2),
`Stuff+` = round((xRVStuffZ * 10) + 100, 0))
# Group by pitcher, year and pitch type
results <- stuff_res %>%
group_by(pitcher, game_year, pitch_type) %>%
summarise(`Stuff+` = mean(`Stuff+`, na.rm = TRUE))
glimpse(players)
# Add player names
results <- results %>%
left_join(players, by = c("pitcher" = "key_mlbam"))
View(results)
# Group by pitcher, year and pitch type
results <- stuff_res %>%
group_by(pitcher, game_year, pitch_type) %>%
summarise(Pitches = n(),
`Stuff+` = mean(`Stuff+`, na.rm = TRUE))
# Add player names
results <- results %>%
left_join(players, by = c("pitcher" = "key_mlbam"))
# Group by pitcher, year and pitch type
results <- stuff_res %>%
group_by(pitcher, game_year, pitch_type) %>%
summarise(Pitches = n(),
`Stuff+` = mean(`Stuff+`, na.rm = TRUE))
# Add player names
results <- results %>%
left_join(players %>% select(key_mlbam, name_full), by = c("pitcher" = "key_mlbam"))
this_year <- results(filter(game_year == 2024))
this_year <- results %>% filter(game_year == 2024)
View(this_year)
# Convert to Stuff+
league_overall_stuff <- stuff_res %>%
group_by(game_year) %>%
summarise(mean_xRVStuff = mean(xRVStuff, na.rm = TRUE),
sd_xRVStuff = sd(xRVStuff, na.rm = TRUE))
stuff_res <- stuff_res %>%
left_join(league_overall_stuff, by = "game_year") %>%
mutate(xRVStuffZ = round(-(xRVStuff - mean_xRVStuff) / sd_xRVStuff, 2),
`Stuff+` = round((xRVStuffZ * 25) + 100, 0))
# Add player names
results <- results %>%
left_join(players %>% select(key_mlbam, name_full), by = c("pitcher" = "key_mlbam"))
# Convert to Stuff+
league_overall_stuff <- stuff_res %>%
group_by(game_year) %>%
summarise(mean_xRVStuff = mean(xRVStuff, na.rm = TRUE),
sd_xRVStuff = sd(xRVStuff, na.rm = TRUE))
View(league_overall_stuff)
stuff_res <- stuff_res %>%
left_join(league_overall_stuff, by = "game_year") %>%
mutate(xRVStuffZ = round(-(xRVStuff - mean_xRVStuff) / sd_xRVStuff, 2),
`Stuff+` = round((xRVStuffZ * 25) + 100, 0))
library(tidyverse)
library(DBI)
library(RMySQL)
library(tidymodels)
library(xgboost)
# Database credentials
DB_USER <- Sys.getenv("PSU_BASE_USER")
DB_PASSWORD <- Sys.getenv("PSU_BASE_PASSWORD")
DB_DBNAME <- Sys.getenv("PSU_BASE_DBNAME")
DB_PORT <- as.numeric(Sys.getenv("PSU_BASE_PORT"))
DB_HOST <- Sys.getenv("PSU_BASE_HOST")
# Connect to psubase_db
con <- dbConnect(MySQL(), user = DB_USER, password = DB_PASSWORD, dbname = DB_DBNAME, port = DB_PORT, host = DB_HOST)
# Define query function
query_db <- function(query_logic) {
query <- paste0(query_logic)
rs <- dbSendQuery(con, query)
df <- fetch(rs, n = -1)
return(df)
}
# Pull Data ----------
# Read in MLB pitches thrown since 2020
pitches_query <- paste0("SELECT pitch_id, pitch_type, game_pk, game_year, release_speed, release_pos_x, release_pos_z, pitcher, p_throws, pfx_x, pfx_z, release_extension
FROM sc_raw
WHERE game_year >= 2020 AND game_type = 'R';")
pitches <- query_db(pitches_query)
players_query <- paste0("SELECT *
FROM mlb_players;")
players <- query_db(players_query)
# Disconnect from psubase_db
dbDisconnect(con)
# Feature Engineering ---------
# Convert pitch movement to inches and switch to pitcher's perspective
pitches_stuff <- pitches %>%
mutate(game_pk = as.integer(game_pk),
pfx_x = pfx_x * 12 * -1,
pfx_z = pfx_z * 12)
# Standardize horizontal movement, horizontal release position, and spin axis to RHP perspective
pitches_stuff <- pitches_stuff %>%
mutate(pfx_x_adj = ifelse(p_throws == "L", -pfx_x, pfx_x),
release_pos_x_adj = ifelse(p_throws == "L", -release_pos_x, release_pos_x))#,
#spin_axis_adj = ifelse(p_throws == "L", 360 - spin_axis, spin_axis))
# Get average velocity and movement of fastballs thrown by each pitcher/game combination
fb_avgs <- pitches_stuff %>%
filter(pitch_type %in% c("FF", "SI", "FC")) %>%
group_by(game_pk, pitcher, pitch_type) %>%
summarise(fb_count = n(),
fb_release_speed = mean(release_speed, na.rm = TRUE),
fb_pfx_x_adj = mean(pfx_x_adj, na.rm = TRUE),
fb_pfx_z = mean(pfx_z, na.rm = TRUE)) %>%
rename(fb_pitch_type = pitch_type)
# Identify primary fastball for each pitcher/game combination
prim_fb_avgs <- fb_avgs %>%
group_by(game_pk, pitcher) %>%
arrange(desc(fb_count)) %>%
filter(row_number() == 1)
# Merge all pitches with average primary fastball characteristics for that game
pitches_stuff <- left_join(pitches_stuff, prim_fb_avgs, by = c("game_pk", "pitcher"))
# Calculate velocity and movement differentials for breaking balls and offspeed based on primary fastball
pitches_stuff <- pitches_stuff %>%
mutate(release_speed_dif = release_speed - fb_release_speed,
pfx_x_adj_dif = pfx_x_adj - fb_pfx_x_adj,
pfx_z_dif = pfx_z - fb_pfx_z)
# Fix differentials for primary fastballs
pitches_stuff <- pitches_stuff %>%
mutate(release_speed_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, release_speed_dif),
pfx_x_adj_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, pfx_x_adj_dif),
pfx_z_dif = ifelse(pitch_type %in% c("FF", "SI") | (pitch_type == "FC" & fb_pitch_type == "FC"), 0, pfx_z_dif))
# Calculate Stuff+ ----------
# Load Stuff+ model
stuff_model <- readRDS("C:/Users/malco/Documents/GitHub/STAT494H/stuff_plus/volume/models/final_model.rds")
# Use function to calculate xRVStuff for all pitches in sc_raw
get_xRVStuff <- function(data) {
# Separate pitches with missing values
clean <- data %>% filter(complete.cases(.))
dirty <- data %>% filter(!complete.cases(.))
clean_preds <- predict(stuff_model, clean) %>%
bind_cols(clean) %>%
rename(xRVStuff = .pred)
dirty <- dirty %>% mutate(xRVStuff = NA)
stuff_res <- rbind(clean_preds, dirty)
return(stuff_res)
}
stuff_res <- get_xRVStuff(pitches_stuff) # xRVStuff for all pitches in sc_raw
# Convert to Stuff+
league_overall_stuff <- stuff_res %>%
group_by(game_year) %>%
summarise(mean_xRVStuff = mean(xRVStuff, na.rm = TRUE),
sd_xRVStuff = sd(xRVStuff, na.rm = TRUE))
stuff_res <- stuff_res %>%
left_join(league_overall_stuff, by = "game_year") %>%
mutate(xRVStuffZ = round(-(xRVStuff - mean_xRVStuff) / sd_xRVStuff, 2),
`Stuff+` = round((xRVStuffZ * 25) + 100, 0))
# Group by pitcher, year and pitch type
results <- stuff_res %>%
group_by(pitcher, game_year, pitch_type) %>%
summarise(Pitches = n(),
`Stuff+` = mean(`Stuff+`, na.rm = TRUE))
# Add player names
results <- results %>%
left_join(players %>% select(key_mlbam, name_full), by = c("pitcher" = "key_mlbam"))
this_year <- results %>% filter(game_year == 2024)
View(this_year)
# Title: Baseball Savant Jr.
# Author: Ted Zerbe
# Front Matter ----------
library(shiny)
library(tidyverse)
library(DBI)
library(RMySQL)
# Database credentials
DB_USER <- "admin"
DB_PASSWORD <- "u3vH*NJTeh"
DB_DBNAME <- "psubase_db"
DB_PORT <- 3306
DB_HOST <- "psubase.coxdiubu0hgl.us-east-1.rds.amazonaws.com"
# Connect to DB
con <- dbConnect(MySQL(), user = DB_USER, password = DB_PASSWORD, dbname = DB_DBNAME, port = DB_PORT, host = DB_HOST)
# Query DB function
query_db <- function(query_logic) {
query <- paste0(query_logic)
rs <- dbSendQuery(con, query)
df <- fetch(rs, n = -1)
return(df)
}
# Pull Statcast Data
query <- paste("SELECT *
FROM sc_raw
WHERE game_year = 2024;")
sc_raw <- query_db(query)
setwd("C:/Users/malco/Documents/GitHub/DS340W_HO")
